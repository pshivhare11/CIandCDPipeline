# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- none

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ServiceConnection: 'testservice'
  
stages:
- stage: Build
  jobs:
  - job: Build
    displayName: Build Project
    steps:
    
    - task: NuGetToolInstaller@1
    
    - task: NuGetCommand@2    
      inputs:
        restoreSolution: '$(solution)'
    - task: VSBuild@1
      displayName: ProjectBuild
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: VSTest@2
          
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: PublishBuildArtifacts@1
      
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'dotnet'
        publishLocation: 'Container'
      condition: succeededOrFailed()
${{ if eq(parameters.environment, 'Dev') }}:
  - stage: 'DeployToDev'
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - template: ./pipelines/common-call.yml
        parameters:
          azureServiceConnection: '$(serviceConnection)'
          environmentName: 'Development'
          webAppServiceName: 'DevTestWebAppService'
          deployFor: 'Deploy_To_Dev'    

- stage: 'Development'
  displayName: 'Deploy To Development Stage'
  jobs:
  - deployment: 'DeployToDev'
    displayName: 'Deploy Web Application To Dev'
    environment: 'dev'
    variables:
      EnvironmentName: 'Development'
      MyVariable: 'Dev_Value'
      DevWebAppService: 'DevTestWebAppService'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: DownloadBuildArtifacts@0
            displayName: Download_Build_Artifacts
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: '$(System.ArtifactsDirectory)'
              artifactName: 'dotnet'
          
          - task: AzureRmWebAppDeployment@4
            displayName: Deploy_To_Server
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(ServiceConnection)'
              appType: 'webApp'
              WebAppName: '$(DevWebAppService)'
              packageForLinux: '$(Build.ArtifactStagingDirectory)/dotnet/*.zip'

- stage: 'Production'
  displayName: 'Deploy To Production Stage'
  jobs:
  - deployment: 'DeployToProduction'
    environment: 'Prod'
    variables:
      EnvironmentName: 'Production'
      MyVariable: 'Prod_Value'
      ProdWebAppService: 'ProdTestWebAppService'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo 'Reached Deployment'
          - script: echo 'Manual Intervention Applied'
         # - task: ManualValidation@0
         #   displayName: 'Manual Intervention'
          - task: DownloadBuildArtifacts@0
            displayName: Download_Build_Artifacts
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: '$(System.ArtifactsDirectory)'
              artifactName: 'dotnet'
         # - task: ManualIntervention@8

          
          - task: AzureRmWebAppDeployment@4
            displayName: Deploy_To_Server
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(ServiceConnection)'
              appType: 'webApp'
              WebAppName: '$(ProdWebAppService)'
              packageForLinux: '$(Build.ArtifactStagingDirectory)/dotnet/*.zip'

